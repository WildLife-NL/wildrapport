// Mocks generated by Mockito 5.4.6 from annotations
// in wildrapport/test/business/category_tests/category_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;
import 'dart:ui' as _i10;

import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wildrapport/interfaces/animal_interface.dart' as _i11;
import 'package:wildrapport/interfaces/animal_sighting_reporting_interface.dart'
    as _i4;
import 'package:wildrapport/interfaces/navigation_state_interface.dart' as _i14;
import 'package:wildrapport/models/animal_model.dart' as _i5;
import 'package:wildrapport/models/animal_sighting_model.dart' as _i2;
import 'package:wildrapport/models/date_time_model.dart' as _i13;
import 'package:wildrapport/models/enums/animal_age.dart' as _i7;
import 'package:wildrapport/models/enums/animal_category.dart' as _i9;
import 'package:wildrapport/models/enums/animal_gender.dart' as _i6;
import 'package:wildrapport/models/enums/report_type.dart' as _i16;
import 'package:wildrapport/models/location_model.dart' as _i12;
import 'package:wildrapport/models/view_count_model.dart' as _i8;
import 'package:wildrapport/providers/app_state_provider.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAnimalSightingModel_0 extends _i1.SmartFake
    implements _i2.AnimalSightingModel {
  _FakeAnimalSightingModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGlobalKey_1<T extends _i3.State<_i3.StatefulWidget>>
    extends _i1.SmartFake
    implements _i3.GlobalKey<T> {
  _FakeGlobalKey_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AnimalSightingReportingInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimalSightingReportingInterface extends _i1.Mock
    implements _i4.AnimalSightingReportingInterface {
  MockAnimalSightingReportingInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AnimalSightingModel createanimalSighting() =>
      (super.noSuchMethod(
            Invocation.method(#createanimalSighting, []),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#createanimalSighting, []),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateSelectedAnimal(
    _i5.AnimalModel? selectedAnimal,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateSelectedAnimal, [selectedAnimal]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateSelectedAnimal, [selectedAnimal]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateGender(_i6.AnimalGender? gender) =>
      (super.noSuchMethod(
            Invocation.method(#updateGender, [gender]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateGender, [gender]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateAge(_i7.AnimalAge? age) =>
      (super.noSuchMethod(
            Invocation.method(#updateAge, [age]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateAge, [age]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateViewCount(_i8.ViewCountModel? viewCount) =>
      (super.noSuchMethod(
            Invocation.method(#updateViewCount, [viewCount]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateViewCount, [viewCount]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateCategory(_i9.AnimalCategory? category) =>
      (super.noSuchMethod(
            Invocation.method(#updateCategory, [category]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateCategory, [category]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i9.AnimalCategory convertStringToCategory(String? status) =>
      (super.noSuchMethod(
            Invocation.method(#convertStringToCategory, [status]),
            returnValue: _i9.AnimalCategory.andere,
          )
          as _i9.AnimalCategory);

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  _i2.AnimalSightingModel finalizeAnimal({bool? clearSelected = true}) =>
      (super.noSuchMethod(
            Invocation.method(#finalizeAnimal, [], {
              #clearSelected: clearSelected,
            }),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#finalizeAnimal, [], {
                #clearSelected: clearSelected,
              }),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  void clearCurrentanimalSighting() => super.noSuchMethod(
    Invocation.method(#clearCurrentanimalSighting, []),
    returnValueForMissingStub: null,
  );

  @override
  _i2.AnimalSightingModel updateDescription(String? description) =>
      (super.noSuchMethod(
            Invocation.method(#updateDescription, [description]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateDescription, [description]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  bool validateActiveAnimalSighting() =>
      (super.noSuchMethod(
            Invocation.method(#validateActiveAnimalSighting, []),
            returnValue: false,
          )
          as bool);

  @override
  _i2.AnimalSightingModel processAnimalSelection(
    _i5.AnimalModel? selectedAnimal,
    _i11.AnimalManagerInterface? animalManager,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#processAnimalSelection, [
              selectedAnimal,
              animalManager,
            ]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#processAnimalSelection, [
                selectedAnimal,
                animalManager,
              ]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  bool handleGenderSelection(_i6.AnimalGender? selectedGender) =>
      (super.noSuchMethod(
            Invocation.method(#handleGenderSelection, [selectedGender]),
            returnValue: false,
          )
          as bool);

  @override
  _i2.AnimalSightingModel updateAnimal(_i5.AnimalModel? updatedAnimal) =>
      (super.noSuchMethod(
            Invocation.method(#updateAnimal, [updatedAnimal]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateAnimal, [updatedAnimal]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateLocation(_i12.LocationModel? location) =>
      (super.noSuchMethod(
            Invocation.method(#updateLocation, [location]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateLocation, [location]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel removeLocation(_i12.LocationModel? location) =>
      (super.noSuchMethod(
            Invocation.method(#removeLocation, [location]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#removeLocation, [location]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateDateTime(DateTime? dateTime) =>
      (super.noSuchMethod(
            Invocation.method(#updateDateTime, [dateTime]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateDateTime, [dateTime]),
            ),
          )
          as _i2.AnimalSightingModel);

  @override
  _i2.AnimalSightingModel updateDateTimeModel(
    _i13.DateTimeModel? dateTimeModel,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateDateTimeModel, [dateTimeModel]),
            returnValue: _FakeAnimalSightingModel_0(
              this,
              Invocation.method(#updateDateTimeModel, [dateTimeModel]),
            ),
          )
          as _i2.AnimalSightingModel);
}

/// A class which mocks [NavigationStateInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationStateInterface extends _i1.Mock
    implements _i14.NavigationStateInterface {
  MockNavigationStateInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetToHome(_i3.BuildContext? context) => super.noSuchMethod(
    Invocation.method(#resetToHome, [context]),
    returnValueForMissingStub: null,
  );

  @override
  void clearApplicationState(_i3.BuildContext? context) => super.noSuchMethod(
    Invocation.method(#clearApplicationState, [context]),
    returnValueForMissingStub: null,
  );

  @override
  void pushAndRemoveUntil(_i3.BuildContext? context, _i3.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushAndRemoveUntil, [context, screen]),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementForward(_i3.BuildContext? context, _i3.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushReplacementForward, [context, screen]),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementBack(_i3.BuildContext? context, _i3.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushReplacementBack, [context, screen]),
        returnValueForMissingStub: null,
      );

  @override
  void pushForward(_i3.BuildContext? context, _i3.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushForward, [context, screen]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppStateProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateProvider extends _i1.Mock implements _i15.AppStateProvider {
  MockAppStateProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GlobalKey<_i3.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(
            Invocation.getter(#navigatorKey),
            returnValue: _FakeGlobalKey_1<_i3.NavigatorState>(
              this,
              Invocation.getter(#navigatorKey),
            ),
          )
          as _i3.GlobalKey<_i3.NavigatorState>);

  @override
  bool get isLocationCacheValid =>
      (super.noSuchMethod(
            Invocation.getter(#isLocationCacheValid),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setScreenState(String? screenName, String? key, dynamic value) =>
      super.noSuchMethod(
        Invocation.method(#setScreenState, [screenName, key, value]),
        returnValueForMissingStub: null,
      );

  @override
  T? getScreenState<T>(String? screenName, String? key) =>
      (super.noSuchMethod(Invocation.method(#getScreenState, [screenName, key]))
          as T?);

  @override
  void clearScreenState(String? screenName) => super.noSuchMethod(
    Invocation.method(#clearScreenState, [screenName]),
    returnValueForMissingStub: null,
  );

  @override
  void initializeReport(_i16.ReportType? reportType) => super.noSuchMethod(
    Invocation.method(#initializeReport, [reportType]),
    returnValueForMissingStub: null,
  );

  @override
  void updateCurrentReport(String? property, dynamic value) =>
      super.noSuchMethod(
        Invocation.method(#updateCurrentReport, [property, value]),
        returnValueForMissingStub: null,
      );

  @override
  void resetApplicationState(
    _i3.BuildContext? context, {
    _i3.Widget? destination,
  }) => super.noSuchMethod(
    Invocation.method(
      #resetApplicationState,
      [context],
      {#destination: destination},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i17.Future<void> updateLocationCache() =>
      (super.noSuchMethod(
            Invocation.method(#updateLocationCache, []),
            returnValue: _i17.Future<void>.value(),
            returnValueForMissingStub: _i17.Future<void>.value(),
          )
          as _i17.Future<void>);

  @override
  void startLocationUpdates() => super.noSuchMethod(
    Invocation.method(#startLocationUpdates, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
