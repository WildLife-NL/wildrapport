// Mocks generated by Mockito 5.4.6 from annotations
// in wildrapport/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i9;

import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:wildrapport/interfaces/api/auth_api_interface.dart' as _i3;
import 'package:wildrapport/interfaces/login_interface.dart' as _i7;
import 'package:wildrapport/interfaces/navigation_state_interface.dart' as _i5;
import 'package:wildrapport/interfaces/permission_interface.dart' as _i10;
import 'package:wildrapport/models/api_models/user.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthApiInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApiInterface extends _i1.Mock implements _i3.AuthApiInterface {
  MockAuthApiInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, dynamic>> authenticate(
    String? displayNameApp,
    String? email,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#authenticate, [displayNameApp, email]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<_i2.User> authorize(String? email, String? code) =>
      (super.noSuchMethod(
            Invocation.method(#authorize, [email, code]),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#authorize, [email, code])),
            ),
          )
          as _i4.Future<_i2.User>);
}

/// A class which mocks [NavigationStateInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationStateInterface extends _i1.Mock
    implements _i5.NavigationStateInterface {
  MockNavigationStateInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetToHome(_i6.BuildContext? context) => super.noSuchMethod(
    Invocation.method(#resetToHome, [context]),
    returnValueForMissingStub: null,
  );

  @override
  void clearApplicationState(_i6.BuildContext? context) => super.noSuchMethod(
    Invocation.method(#clearApplicationState, [context]),
    returnValueForMissingStub: null,
  );

  @override
  void pushAndRemoveUntil(_i6.BuildContext? context, _i6.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushAndRemoveUntil, [context, screen]),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementForward(_i6.BuildContext? context, _i6.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushReplacementForward, [context, screen]),
        returnValueForMissingStub: null,
      );

  @override
  void pushReplacementBack(_i6.BuildContext? context, _i6.Widget? screen) =>
      super.noSuchMethod(
        Invocation.method(#pushReplacementBack, [context, screen]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoginInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginInterface extends _i1.Mock implements _i7.LoginInterface {
  MockLoginInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> handleLogin(String? email, _i6.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#handleLogin, [email, context]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> handleVerificationCode(
    String? email,
    String? code,
    _i6.BuildContext? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#handleVerificationCode, [email, code, context]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> resendCode(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#resendCode, [email]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.User> verifyCode(String? email, String? code) =>
      (super.noSuchMethod(
            Invocation.method(#verifyCode, [email, code]),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#verifyCode, [email, code])),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<bool> sendLoginCode(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#sendLoginCode, [email]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void setVerificationVisible(bool? visible) => super.noSuchMethod(
    Invocation.method(#setVerificationVisible, [visible]),
    returnValueForMissingStub: null,
  );

  @override
  bool isVerificationVisible() =>
      (super.noSuchMethod(
            Invocation.method(#isVerificationVisible, []),
            returnValue: false,
          )
          as bool);

  @override
  bool hasError() =>
      (super.noSuchMethod(Invocation.method(#hasError, []), returnValue: false)
          as bool);

  @override
  String getErrorMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getErrorMessage, []),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getErrorMessage, []),
            ),
          )
          as String);

  @override
  void setError(bool? isError, [String? message = '']) => super.noSuchMethod(
    Invocation.method(#setError, [isError, message]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PermissionInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionInterface extends _i1.Mock
    implements _i10.PermissionInterface {
  MockPermissionInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isPermissionGranted(_i10.PermissionType? permission) =>
      (super.noSuchMethod(
            Invocation.method(#isPermissionGranted, [permission]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> requestPermission(
    _i6.BuildContext? context,
    _i10.PermissionType? permission, {
    bool? showRationale = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #requestPermission,
              [context, permission],
              {#showRationale: showRationale},
            ),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> showPermissionRationale(
    _i6.BuildContext? context,
    _i10.PermissionType? permission,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#showPermissionRationale, [context, permission]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> handleInitialPermissions(_i6.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#handleInitialPermissions, [context]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
